#include <iostream>
#include <string>

using namespace std;

int choicequiz;
// Forward declaration of the CourseStudent class
class CourseStudent;
class UserStudent
{
protected:
    string username;
    string password;

public:
    UserStudent() {}

    UserStudent(const string &username, const string &password) : username(username), password(password) {}

    void setUsername(const string &username)
    {
        this->username = username;
    }

    string getUsername() const
    {
        return username;
    }

    void setPassword(const string &password)
    {
        this->password = password;
    }

    string getPassword() const
    {
        return password;
    }

    virtual void login()
    {
        cout << "Logging in as " << username << endl;
    }
};

// Forward declarations
struct CourseMaterial;
struct CourseSession;

class Student : public UserStudent
{
private:
    string name;
    int quizzes;
    int assignments;
    int exams;
    bool certified;

public:
    Student() {}

    Student(const string &username, const string &password, const string &name)
        : UserStudent(username, password), name(name), quizzes(0), assignments(0), exams(0), certified(false) {}

    void submitAssignment()
    {
        // cout << "assignment has been submitted" << endl;

        string studentName, assignment, subject;
    int choice;

    // Predefined subjects
    string subjects[] = {
        "Basic Computer Science", "OOP", "English", "Communications",
        "Calculus 1", "Calculus 2", "Chemistry", "Health", "Stats"
    };

    // Get student's name
    cout << "Enter your name: ";
    getline(cin, studentName);

    // Choose subject for assignment submission
    cout << "Choose the subject for assignment submission:" << endl;
    for (int i = 0; i < 9; ++i) {
        cout << i + 1 << ". " << subjects[i] << endl;
    }
    cout << "Enter your choice (1-9): ";
    cin >> choice;
    cin.ignore(); // Ignore newline character from previous input

    // Check for valid choice
    if (choice >= 1 && choice <= 9) {
        subject = subjects[choice - 1];

        // Get assignment from student
        cout << "Enter your assignment for " << subject << ": ";
        getline(cin, assignment);

        // Submit assignment
        cout << "Student " << studentName << " submitted assignment for " << subject << ": " << assignment << endl;
        
    } else {
        cout << "Invalid choice. Please choose a number between 1 and 9." << endl;
    }


        assignments++;
        // checkCertification();
        
    }

    void takeExam()
    {
        cout << "exam has been taken." << endl;
        exams++;
        checkCertification();
    }
    void takeQuiz(int choicequiz);

    void checkCertification();

    void displayProgress();

    void browseCourses(const CourseStudent courses[], int numCourses);

    void enrollCourse(const CourseStudent &course);

    void accessCourseMaterial(const CourseMaterial materials[], int numMaterials);

    void participateInSession(const CourseSession sessions[], int numSessions);
};

class InstructorStudent : public UserStudent
{
public:
    InstructorStudent() {}

    InstructorStudent(const string &username, const string &password) : UserStudent(username, password) {}

    void createCourse(const string &courseName)
    {
        cout << getUsername() << " created course: " << courseName << endl;
    }
};

class AdministratorStudent : public UserStudent
{
public:
    AdministratorStudent() {}

    AdministratorStudent(const string &username, const string &password) : UserStudent(username, password) {}

    void manageAccounts()
    {
        cout << "Administrator managing accounts" << endl;
    }
};

// Structure to represent a course material item
struct CourseMaterial
{
    string title;
    string content;
    string description;
};

// Structure to represent a class session
struct CourseSession
{
    string topic;
    string instructor;
};

class CourseStudent
{
private:
    string courseName;
    string instructor;
    string description;
    string enrolledStudents[100]; // Array to store enrolled student usernames (assuming maximum 100 students)

public:
    CourseStudent() {}

    CourseStudent(const string &courseName, const string &instructor, const string &description)
        : courseName(courseName), instructor(instructor), description(description) {}

    void setCourseName(const string &courseName)
    {
        this->courseName = courseName;
    }

    string getCourseName() const
    {
        return courseName;
    }

    void setInstructor(const string &instructor)
    {
        this->instructor = instructor;
    }

    string getInstructor() const
    {
        return instructor;
    }

    void setDescription(const string &description)
    {
        this->description = description;
    }

    string getDescription() const
    {
        return description;
    }

    void displayDetails() const
    {
        cout << "Course: " << courseName << endl;
        cout << "Instructor: " << instructor << endl;
        cout << "Description: " << description << endl;
    }

    void enrollStudent(Student &student)
    {
        for (int i = 0; i < 100; ++i)
        {
            if (enrolledStudents[i].empty())
            {
                enrolledStudents[i] = student.getUsername(); // Store the username of the enrolled student
                cout << student.getUsername() << " enrolled in course: " << courseName << endl;
                return;
            }
        }
        cout << "Course is full. Cannot enroll student." << endl;
    }
};

void promptUser(UserStudent &user, const string &role)
{
    string username, password;

    cout << role << " Login:" << endl;
    cout << "Enter username: ";
    cin >> username;
    user.setUsername(username);

    cout << "Enter password: ";
    cin >> password;
    user.setPassword(password);
}

int mainStudent()
{
    
    // Define some imaginary course materials
    CourseMaterial materials[] = {
        {"Introduction to OOP Concepts", "This material covers the basics of object-oriented programming..."},
        {"Classes and Objects", "This material explains classes, objects, and their relationships..."},
        {"Basic Computer Science", "This material covers the fundamentals of computer science..."},
        {"English", "This material covers English language and literature..."},
        {"Communication", "This material covers communication skills..."},
        {"Calculus 1", "This material covers differential calculus..."},
        {"Calculus 2", "This material covers integral calculus..."},
        {"Chemistry", "This material covers basic principles of chemistry..."},
        {"Health", "This material covers topics related to health and wellness..."},
        {"Statistics", "This material covers statistical analysis..."}
    };

    const int numMaterials = sizeof(materials) / sizeof(materials[0]); // Calculate number of materials

    // Define some imaginary class sessions
    CourseSession sessions[] = {
        {"Session on Introduction to OOP Concepts", "This material covers the basics of object-oriented programming..."},
        {"Session on Classes and Objects", "This material explains classes, objects, and their relationships..."},
        {"Session on Basic Computer Science", "This material covers the fundamentals of computer science..."},
        {"Session on English", "This material covers English language and literature..."},
        {"Session on Communication", "This material covers communication skills..."},
        {"Session on Calculus 1", "This material covers differential calculus..."},
        {"Session on Calculus 2", "This material covers integral calculus..."},
        {"Session on Chemistry", "This material covers basic principles of chemistry..."},
        {"Session on Health", "This material covers topics related to health and wellness..."},
        {"Session on Statistics", "This material covers statistical analysis..."}
    };
    const int numSessions = sizeof(sessions) / sizeof(sessions[0]); // Calculate number of sessions
    CourseStudent courses[] = {
        CourseStudent("CS101", "Mr. Talha Ashfaq", "Introduction to Computer Science"),
        CourseStudent("CS112", "Mr Qasim Riaz", "Data Structures and Algorithms"),
        CourseStudent("HM101", "Mr Abrar", "Introduction to History"),
        CourseStudent("HM102", "Ms Hira Ahad", "World History"),
        CourseStudent("MT101", "Mr Fahad Zulfiqar", "Introduction to Mathematics"),
        CourseStudent("MT102", "Mr Asif", "Calculus"),
        CourseStudent("CH101", "Ms Nida", "Introduction to Chemistry"),
        CourseStudent("CH161", "Ms Ramesha Tariq", "Organic Chemistry"),
        CourseStudent("ES111", "Mr Fahad Zulfiqar", "Introduction to Environmental Science")};
    string choice;
    do
    {
        cout << "For student verification press 1 :" << endl;
        
        cin >> choice;
    } while (choice != "1");

    if (choice == "1")
    {
        Student student;
        promptUser(student, "Student");
        student.login();

        // Define the courses
        student.browseCourses(courses, 9);

        // Prompt for actions
        do
        {
            cout << "\nChoose action:" << endl;
            cout << "1. Access Course Material" << endl;
            cout << "2. Participate in Class Session" << endl;
            cout << "3. Take a Quiz" << endl;
            cout << "4. Submit an assignment" << endl;
            cout << "5. Take an Exam" << endl;
            cout << "6. Exit" << endl;
            cout << "Enter choice (1/2/3/4/5/6): ";
            cin >> choice;

            switch (choice[0])
            {
            case '1':
                student.accessCourseMaterial(materials, numMaterials);
                break;
            case '2':
                student.participateInSession(sessions, numSessions);
                break;
            case '3':
                student.takeQuiz(choicequiz);
                break;
            case '4':
                student.submitAssignment();
                break;
            case '5':
                student.takeExam();
                break;
            case '6':
                cout << "Exiting..." << endl;
                break;
            default:
                cout << "Invalid choice. Please try again." << endl;
            }
        } while (choice != "6");
    }
    
    
    

    return 0;
}
